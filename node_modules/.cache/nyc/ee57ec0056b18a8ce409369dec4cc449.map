{"version":3,"sources":["questiontests.js"],"names":["expect","chai","use","chaiHttp","should","describe","fineboy","email","firstName","lastName","password","questionId","it","done","request","post","then","res","to","have","status","patch","send","data","theQuestion","get","count","del"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAMA,SAASC,eAAKD,MAApB;AACAC,eAAKC,GAAL,CAASC,kBAAT;AACAF,eAAKG,MAAL;;AAGAC,SAAS,WAAT,EAAsB,YAAM;AACxB,QAAMC,UAAU;AACZC,eAAO,cADK;AAEZC,mBAAW,QAFC;AAGZC,kBAAU,MAHE;AAIZC,kBAAU,MAJE;AAKZC,oBAAY;AALA,KAAhB;AAOAN,aAAS,qBAAT,EAAgC,YAAU;AACtCO,WAAG,qDAAH,EAA0D,UAASC,IAAT,EAAe;AACrEZ,2BAAKa,OAAL,CAAa,uBAAb,EACKC,IADL,CACU,eADV,EAEKC,IAFL,CAEU,UAAUC,GAAV,EAAe;AACjBjB,uBAAOiB,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAP;AACH,aALL;AAMH,SAPD;AAQH,KATD;;AAWAR,aAAS,yCAAT,EAAoD,UAASQ,IAAT,EAAe;AAC/DD,WAAG,gDAAH,EAAqD,UAASC,IAAT,EAAe;AAChEZ,2BAAKa,OAAL,CAAa,uBAAb,EACKO,KADL,CACW,kCADX,EAEKC,IAFL,CAEU,EAACC,MAAMjB,QAAQK,UAAf,EAFV,EAGKK,IAHL,CAGU,UAAUC,GAAV,EAAe;AACjBjB,uBAAOiB,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAP;AACH,aANL;AAOH,SARD;AASH,KAVD;;AAYAR,aAAS,2CAAT,EAAsD,UAASQ,IAAT,EAAe;AACjED,WAAG,gDAAH,EAAqD,UAASC,IAAT,EAAe;AAChEZ,2BAAKa,OAAL,CAAa,uBAAb,EACKO,KADL,CACW,oCADX,EAEKC,IAFL,CAEU,EAACE,aAAalB,QAAQK,UAAtB,EAFV,EAGKK,IAHL,CAGU,UAAUC,GAAV,EAAe;AACjBjB,uBAAOiB,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAP;AACH,aANL;AAOH,SARD;AASH,KAVD;;AAYAR,aAAS,gCAAT,EAA2C,UAASQ,IAAT,EAAe;AACtDD,WAAG,gDAAH,EAAqD,UAASC,IAAT,EAAe;AAChEZ,2BAAKa,OAAL,CAAa,uBAAb,EACKW,GADL,CACS,yBADT,EAEKH,IAFL,CAEU,EAACI,OAAO,CAAR,EAFV,EAGKV,IAHL,CAGU,UAAUC,GAAV,EAAe;AACjBjB,uBAAOiB,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAP;AACH,aANL;AAOH,SARD;AASH,KAVD;;AAYAR,aAAS,0CAAT,EAAqD,YAAU;AAC3DO,WAAG,gDAAH,EAAqD,UAASC,IAAT,EAAc;AAC/DZ,2BAAKa,OAAL,CAAa,uBAAb,EACKa,GADL,CACS,kCADT,EAEKL,IAFL,CAEU,EAACC,MAAM,IAAP,EAFV,EAGKP,IAHL,CAGU,UAAUC,GAAV,EAAe;AACjBjB,uBAAOiB,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAP;AACH,aANL;AAOH,SARD;AASH,KAVD;AAWH,CAlED","file":"questiontests.js","sourceRoot":"C:/Users/HP/Desktop/theBootcamp/tests","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\n\r\n//configure chai\r\nconst expect = chai.expect;\r\nchai.use(chaiHttp);\r\nchai.should();\r\n\r\n\r\ndescribe('Questions', () => {\r\n    const fineboy = {\r\n        email: 'Yourba@demon',\r\n        firstName: 'Newark',\r\n        lastName: 'Stop',\r\n        password: '1234',\r\n        questionId: 12345,\r\n    };\r\n    describe('#POST /v1/questions', function(){\r\n        it('should return 400 if required fields are not filled', function(done) {\r\n            chai.request('http://localhost:3000')\r\n                .post('/v1/questions')\r\n                .then(function (res) {\r\n                    expect(res).to.have.status(400);\r\n                    done();\r\n                })\r\n        })\r\n    })\r\n\r\n    describe('#PATCH /v1/questions/:questionId/upvote', function(done) {\r\n        it('should return 404 if questionId does not exist', function(done) {\r\n            chai.request('http://localhost:3000')\r\n                .patch('/v1/questions/:questionId/upvote')\r\n                .send({data: fineboy.questionId})\r\n                .then(function (res) {\r\n                    expect(res).to.have.status(404);\r\n                    done();\r\n                })\r\n        });\r\n    });\r\n\r\n    describe('#PATCH /v1/questions/:questionId/downvote', function(done) {\r\n        it('should return 404 if questionId does not exist', function(done) {\r\n            chai.request('http://localhost:3000')\r\n                .patch('/v1/questions/:questionId/downvote')\r\n                .send({theQuestion: fineboy.questionId})\r\n                .then(function (res) {\r\n                    expect(res).to.have.status(404);\r\n                    done();\r\n                })\r\n        })\r\n    })\r\n\r\n    describe('#PATCH /v1/questions/:meetupId', function(done) {\r\n        it('should return 404 if questionId does not exist', function(done) {\r\n            chai.request('http://localhost:3000')\r\n                .get('/v1/questions/:meetupId')\r\n                .send({count: 0})\r\n                .then(function (res) {\r\n                    expect(res).to.have.status(404);\r\n                    done();\r\n                })\r\n        })\r\n    })\r\n\r\n    describe('#DELETE /v1/questions/:questionId/delete', function(){\r\n        it('should return 404 if the question doesnt exist', function(done){\r\n            chai.request('http://localhost:3000')\r\n                .del('/v1/questions/:questionId/delete')\r\n                .send({data: 1010})\r\n                .then(function (res) {\r\n                    expect(res).to.have.status(404);\r\n                    done();\r\n                })\r\n        })\r\n    })\r\n});\r\n"]}