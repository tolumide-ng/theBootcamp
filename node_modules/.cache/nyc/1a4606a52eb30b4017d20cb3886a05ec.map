{"version":3,"sources":["questionsControllers.js"],"names":["Questions","createQuestion","req","res","data","body","title","meetupId","user","questionId","upvotes","downvotes","status","json","message","createdQuestion","questionsModels","askQuestion","releaseEvents","createdBy","upvote","downvote","Post","type","url","upVote_Question","downVote_Question","getAllQuestions","params","allQuestions","getMeetupQuestions","count","length","map","question","delete","confirm","forDel","theQuestion","theUser","usersModels","findUser","userId","theMeetup","meetupsModels","getOne","upvoteQuestion","requestUpvote","requestDownvote"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY;AACdC,kBADc,0BACCC,GADD,EACMC,GADN,EACW;AACrB,YAAMC,OAAOF,IAAIG,IAAjB;AACA,YAAG,CAACD,KAAKE,KAAN,IAAe,CAACF,KAAKC,IAArB,IACI,CAACD,KAAKG,QADV,IACsB,CAACH,KAAKI,IAD5B,IAEI,CAACJ,KAAKK,UAFV,IAEwB,CAACL,KAAKM,OAF9B,IAGI,CAACN,KAAKO,SAHb,EAGwB;AAChB,mBAAOR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yBAAS;AADe,aAArB,CAAP;AAGH;AACD,YAAMC,kBAAkBC,0BAAgBC,WAAhB,CAA4Bf,IAAIG,IAAhC,CAAxB;AACA,eAAOa,cAAcN,MAAd,CAAqB,GAArB,EAA0BC,IAA1B,CAA+B;AAClCM,uBAAWJ,gBAAgBI,SADO;AAElCZ,sBAAUQ,gBAAgBR,QAFQ;AAGlCE,wBAAYM,gBAAgBN,UAHM;AAIlCJ,kBAAMU,gBAAgBV,IAJY;AAKlCC,mBAAOS,gBAAgBT,KALW;AAMlCc,oBAAQL,gBAAgBK,MANU;AAOlCC,sBAAUN,gBAAgBM,QAPQ;AAQlCC,kBAAM;AACFC,sBAAM,KADJ;AAEFC,2DAAyCT,gBAAgBR;AAFvD,aAR4B;AAYhCkB,6BAAiB;AACfF,sBAAM,OADS;AAEfC,6DAA2CT,gBAAgBN,UAA3D;AAFe,aAZe;AAgBhCiB,+BAAmB;AACjBH,sBAAM,OADW;AAEjBC,6DAA2CT,gBAAgBN,UAA3D;AAFiB;AAhBa,SAA/B,CAAP;AAqBP,KAjCa;AAmCdkB,mBAnCc,2BAmCEzB,GAnCF,EAmCOC,GAnCP,EAmCY;AACtB,YAAMC,OAAOF,IAAI0B,MAAJ,CAAWrB,QAAxB;AACA,YAAMsB,eAAeb,0BAAgBc,kBAAhB,CAAmC1B,IAAnC,CAArB;AACA,YAAM2B,QAAQF,aAAaG,MAA3B;AACA,YAAGD,QAAQ,CAAX,EAAc;AACV,mBAAO5B,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBT,sBAAMyB,aAAaI,GAAb,CAAiB;AAAA,2BAAa;AAChCd,mCAAWe,SAASf,SADY;AAEhCZ,kCAAU2B,SAAS3B,QAFa;AAGhCD,+BAAO4B,SAAS5B,KAHgB;AAIhCD,8BAAM6B,SAAS7B,IAJiB;AAKhCe,gCAAQc,SAASd,MALe;AAMhCC,kCAAUa,SAASb;AANa,qBAAb;AAAA,iBAAjB;AADkB,aAArB,CAAP;AAUH;AACD,eAAOlB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH,KAtDa;AAwDdqB,UAxDc,mBAwDPjC,GAxDO,EAwDFC,GAxDE,EAwDG;AACb;AACA,YAAMC,OAAOF,IAAI0B,MAAJ,CAAWnB,UAAxB;AACA,YAAM2B,UAAUpB,0BAAgBqB,MAAhB,CAAuBjC,IAAvB,CAAhB;AACA,YAAGgC,OAAH,EAAY;AACRpB,sCAAgBmB,MAAhB,CAAuB/B,IAAvB;AACA,mBAAOD,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yBAAS;AADe,aAArB,CAAP;AAGH;AACD,eAAOX,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH,KArEa;AAuEdM,UAvEc,kBAuEPlB,GAvEO,EAuEFC,GAvEE,EAuEG;AACb,YAAMC,OAAOF,IAAI0B,MAAJ,CAAWnB,UAAxB;AACA,YAAM6B,cAActB,0BAAgBqB,MAAhB,CAAuBjC,KAAKK,UAA5B,CAApB;AACA;AACA,YAAM8B,UAAUC,sBAAYC,QAAZ,CAAqBrC,KAAKsC,MAA1B,CAAhB;AACA;AACA,YAAMC,YAAYC,wBAAcC,MAAd,CAAqBzC,KAAKG,QAA1B,CAAlB;AACA,YAAG+B,eAAeC,OAAf,IAA0BI,SAA7B,EAAuC;AACnC,gBAAMG,iBAAiB9B,0BAAgB+B,aAAhB,CAA8B7C,IAAIG,IAAlC,CAAvB;AACA,mBAAOF,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBQ,0BAAUyB,eAAezB,QADD;AAExBD,wBAAQ0B,eAAe1B;AAFC,aAArB,CAAP;AAIH;AACD,eAAOjB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH,KAxFa;AA0FdO,YA1Fc,oBA0FLnB,GA1FK,EA0FAC,GA1FA,EA0FK;AACf,YAAMC,OAAOF,IAAI0B,MAAJ,CAAWnB,UAAxB;AACA;AACA,YAAM6B,cAActB,0BAAgBqB,MAAhB,CAAuBjC,KAAKK,UAA5B,CAApB;AACA;AACA,YAAM8B,UAAUC,sBAAYC,QAAZ,CAAqBrC,KAAKsC,MAA1B,CAAhB;AACA;AACA,YAAMC,YAAYC,wBAAcC,MAAd,CAAqBzC,KAAKG,QAA1B,CAAlB;AACA,YAAG+B,eAAeC,OAAf,IAA0BI,SAA7B,EAAuC;AACnC,gBAAMG,iBAAiB9B,0BAAgBgC,eAAhB,CAAgC9C,IAAIG,IAApC,CAAvB;AACA,mBAAOF,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBQ,0BAAUyB,eAAezB,QADD;AAExBD,wBAAQ0B,eAAe1B;AAFC,aAArB,CAAP;AAIH;AACD,eAAOjB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH;AA5Ga,CAAlB;;kBA+Ged,S","file":"questionsControllers.js","sourceRoot":"C:/Users/HP/Desktop/theBootcamp/v1/controllers","sourcesContent":["import questionsModels from '../models/questionsModels';\r\nimport meetupsModels from '../models/meetupsModels';\r\nimport usersModels from '../models/usersModels'\r\n\r\nconst Questions = {\r\n    createQuestion(req, res) {\r\n        const data = req.body;\r\n        if(!data.title && !data.body\r\n            && !data.meetupId && !data.user\r\n            && !data.questionId && !data.upvotes\r\n            && !data.downvotes) {\r\n                return res.status(400).json({\r\n                    message: 'All fields are required'\r\n                });\r\n            }\r\n            const createdQuestion = questionsModels.askQuestion(req.body);\r\n            return releaseEvents.status(201).json({\r\n                createdBy: createdQuestion.createdBy,\r\n                meetupId: createdQuestion.meetupId,\r\n                questionId: createdQuestion.questionId, \r\n                body: createdQuestion.body,\r\n                title: createdQuestion.title,\r\n                upvote: createdQuestion.upvote,\r\n                downvote: createdQuestion.downvote,\r\n                Post: {\r\n                    type: 'GET',\r\n                    url: `http://localhost:3000/v1/meetups/${createdQuestion.meetupId}`,\r\n                  },\r\n                  upVote_Question: {\r\n                    type: 'PATCH',\r\n                    url: `http://localhost:3000/v1/questions/${createdQuestion.questionId}/upvote`,\r\n                  },\r\n                  downVote_Question: {\r\n                    type: 'PATCH',\r\n                    url: `http://localhost:3000/v1/questions/${createdQuestion.questionId}/downvote`,\r\n                  },\r\n            });\r\n    }, \r\n\r\n    getAllQuestions(req, res) {\r\n        const data = req.params.meetupId;\r\n        const allQuestions = questionsModels.getMeetupQuestions(data);\r\n        const count = allQuestions.length;\r\n        if(count > 0) {\r\n            return res.status(200).json({\r\n                data: allQuestions.map(question => ({\r\n                    createdBy: question.createdBy,\r\n                    meetupId: question.meetupId, \r\n                    title: question.title, \r\n                    body: question.body,\r\n                    upvote: question.upvote,\r\n                    downvote: question.downvote\r\n                }))\r\n            });\r\n        }\r\n        return res.status(404).json({\r\n            message: 'No questions for this meetup'\r\n        })\r\n    },\r\n\r\n    delete(req, res) {\r\n        //confirm if question exists\r\n        const data = req.params.questionId;\r\n        const confirm = questionsModels.forDel(data);\r\n        if(confirm) {\r\n            questionsModels.delete(data);\r\n            return res.status(200).json({\r\n                message: 'Question Deleted'\r\n            });\r\n        }\r\n        return res.status(404).json({\r\n            message: 'Question not found!'\r\n        })\r\n    },\r\n\r\n    upvote(req, res) {\r\n        const data = req.params.questionId;\r\n        const theQuestion = questionsModels.forDel(data.questionId);\r\n        // does the user exist\r\n        const theUser = usersModels.findUser(data.userId);\r\n        // does the meetup exist\r\n        const theMeetup = meetupsModels.getOne(data.meetupId);\r\n        if(theQuestion && theUser && theMeetup){\r\n            const upvoteQuestion = questionsModels.requestUpvote(req.body);\r\n            return res.status(200).json({\r\n                downvote: upvoteQuestion.downvote,\r\n                upvote: upvoteQuestion.upvote\r\n            });\r\n        }\r\n        return res.status(404).json({\r\n            message: 'Question with this ID Not found'\r\n        });\r\n    },\r\n\r\n    downvote(req, res) {\r\n        const data = req.params.questionId;\r\n        //does the question exist\r\n        const theQuestion = questionsModels.forDel(data.questionId);\r\n        // does the user exist\r\n        const theUser = usersModels.findUser(data.userId);\r\n        // does the meetup exist\r\n        const theMeetup = meetupsModels.getOne(data.meetupId);\r\n        if(theQuestion && theUser && theMeetup){\r\n            const upvoteQuestion = questionsModels.requestDownvote(req.body);\r\n            return res.status(200).json({\r\n                downvote: upvoteQuestion.downvote,\r\n                upvote: upvoteQuestion.upvote\r\n            });\r\n        }\r\n        return res.status(404).json({\r\n            message: 'Question with this ID Not found'\r\n        });\r\n    }\r\n}\r\n\r\nexport default Questions;"]}