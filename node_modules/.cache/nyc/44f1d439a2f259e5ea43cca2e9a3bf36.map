{"version":3,"sources":["usersControllers.js"],"names":["User","signUp","req","res","data","body","theEmail","email","theConfirm","users","confirm","firstName","lastName","phoneNumber","re_password","password","theUser","signup","status","json","message","login","checkEmail","find","user","available","userInfo","exist","findUser","info","userInfor","userId"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,OAAO;AACX;;AAEAC,QAHW,kBAGJC,GAHI,EAGCC,GAHD,EAGM;AACf,QAAMC,OAAOF,IAAIG,IAAjB;AACA,QAAMC,WAAWF,KAAKG,KAAtB;AACA,QAAMC,aAAaC,sBAAMC,OAAN,CAAcJ,QAAd,CAAnB;AACA,QAAIF,KAAKO,SAAL,IAAkBP,KAAKQ,QAAvB,IAAmCR,KAAKG,KAAxC,IACCH,KAAKS,WADN,IACqBT,KAAKU,WAD9B,EAC2C;AACzC,UAAIV,KAAKU,WAAL,KAAqBV,KAAKW,QAA9B,EAAwC;AACtC,YAAI,CAACP,UAAL,EAAiB;AACf,cAAMQ,UAAUP,sBAAMQ,MAAN,CAAab,IAAb,CAAhB;AACA,iBAAOD,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BR,uBAAWK,QAAQL,SADO;AAE1BC,sBAAUI,QAAQJ,QAFQ;AAG1BL,mBAAOS,QAAQT,KAHW;AAI1BM,yBAAaG,QAAQH;AAJK,WAArB,CAAP;AAMD;AACD,eAAOV,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS;AADiB,SAArB,CAAP;AAGD;AACD,aAAOjB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD,WAAOjB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS;AADiB,KAArB,CAAP;AAGD,GA9BU;AAgCXC,OAhCW,iBAgCLnB,GAhCK,EAgCAC,GAhCA,EAgCK;AACd,QAAMC,OAAOF,IAAIG,IAAjB;AACA;AACA,QAAMU,WAAWX,KAAKW,QAAtB;AACA,QAAMR,QAAQH,KAAKG,KAAnB;AACA,QAAMe,aAAab,sBAAMA,KAAN,CAAYc,IAAZ,CAAiB;AAAA,aAAQC,KAAKjB,KAAL,KAAeA,KAAvB;AAAA,KAAjB,CAAnB;AACA,QAAI,CAACe,UAAL,EAAiB;AACf,aAAOnB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD,QAAMK,YAAYhB,sBAAMY,KAAN,CAAYN,QAAZ,CAAlB;AACA,QAAIU,SAAJ,EAAe;AACb,aAAOtB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BR,mBAAWc,UAAUd,SADK;AAE1BC,kBAAUa,UAAUb,QAFM;AAG1BL,eAAOkB,UAAUlB,KAHS;AAI1BM,qBAAaY,UAAUZ;AAJG,OAArB,CAAP;AAMD;AACD,WAAOV,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS;AADiB,KAArB,CAAP;AAGD,GAvDU;AAyDXM,UAzDW,oBAyDFxB,GAzDE,EAyDGC,GAzDH,EAyDQ;AACjB,QAAMC,OAAOF,IAAIG,IAAjB;AACA,QAAMsB,QAAQlB,sBAAMmB,QAAN,CAAexB,IAAf,CAAd;AACA,QAAIuB,KAAJ,EAAW;AACT,UAAME,OAAOpB,sBAAMqB,SAAN,CAAgBH,MAAMI,MAAtB,CAAb;AACA5B,UAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBR,mBAAWkB,KAAKlB,SADG;AAEnBC,kBAAUiB,KAAKjB,QAFI;AAGnBL,eAAOsB,KAAKtB,KAHO;AAInBM,qBAAagB,KAAKhB;AAJC,OAArB;AAMD;AACDV,QAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,eAAS;AADU,KAArB;AAGD;AAxEU,CAAb;;kBA2EepB,I","file":"usersControllers.js","sourceRoot":"C:/Users/HP/Desktop/theBootcamp/v1/controllers","sourcesContent":["import users from '../models/usersModels';\r\n\r\nconst User = {\r\n  /* we need to confirm that the email does\r\n  previosly exist */\r\n  signUp(req, res) {\r\n    const data = req.body;\r\n    const theEmail = data.email;\r\n    const theConfirm = users.confirm(theEmail);\r\n    if (data.firstName && data.lastName && data.email\r\n      && data.phoneNumber && data.re_password) {\r\n      if (data.re_password === data.password) {\r\n        if (!theConfirm) {\r\n          const theUser = users.signup(data);\r\n          return res.status(201).json({\r\n            firstName: theUser.firstName,\r\n            lastName: theUser.lastName,\r\n            email: theUser.email,\r\n            phoneNumber: theUser.phoneNumber,\r\n          });\r\n        }\r\n        return res.status(409).json({\r\n          message: 'Email already exist',\r\n        });\r\n      }\r\n      return res.status(401).json({\r\n        message: 'Password does not match, try again!',\r\n      });\r\n    }\r\n    return res.status(400).json({\r\n      message: 'Bad Syntax: All fields are required',\r\n    });\r\n  },\r\n\r\n  login(req, res) {\r\n    const data = req.body;\r\n    /* const { password, email } = password; */\r\n    const password = data.password;\r\n    const email = data.email;\r\n    const checkEmail = users.users.find(user => user.email === email);\r\n    if (!checkEmail) {\r\n      return res.status(401).json({\r\n        message: 'Auth failed: Password/Email does not exist',\r\n      });\r\n    }\r\n    const available = users.login(password);\r\n    if (available) {\r\n      return res.status(200).json({\r\n        firstName: available.firstName,\r\n        lastName: available.lastName,\r\n        email: available.email,\r\n        phoneNumber: available.phoneNumber,\r\n      });\r\n    }\r\n    return res.status(401).json({\r\n      message: 'Auth failed',\r\n    });\r\n  },\r\n\r\n  userInfo(req, res) {\r\n    const data = req.body;\r\n    const exist = users.findUser(data);\r\n    if (exist) {\r\n      const info = users.userInfor(exist.userId);\r\n      res.status(200).json({\r\n        firstName: info.firstName,\r\n        lastName: info.lastName,\r\n        email: info.email,\r\n        phoneNumber: info.phoneNumber,\r\n      });\r\n    }\r\n    res.status(404).json({\r\n      message: 'User Not Found',\r\n    });\r\n  },\r\n};\r\n\r\nexport default User;"]}